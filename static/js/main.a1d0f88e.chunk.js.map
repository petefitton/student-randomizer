{"version":3,"sources":["Main.js","SEICohort.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","cohorts","map","cohort","temp","key","to","SEIR713","useState","displayText","setDisplayText","students","className","onClick","randNum","Math","round","random","length","tempStudents","i","j","floor","studentArray","student","index","item","App","SEIR713List","SEI29List","basename","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAiBeA,MAdf,SAAcC,GACZ,OACE,oCACE,8CACA,4BACGA,EAAMC,QAAQC,KAAI,SAAAC,GACjB,IAAIC,EAAI,WAAOD,GACf,OAAO,wBAAIE,IAAKF,GAAQ,kBAAC,IAAD,CAAMG,GAAIF,GAAOD,U,QCmCpCI,MA3Cf,SAAiBP,GAAQ,IAAD,EACcQ,mBAAS,CAAC,KADxB,mBACjBC,EADiB,KACJC,EADI,OAEQF,mBAASR,EAAMW,UAFvB,mBAEjBA,EAFiB,KA0BtB,OA1BsB,KA2BpB,oCACE,yBAAKC,UAAU,mBACb,4BAAQC,QAzBd,WACE,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,UAAYN,EAASO,OAAO,IAC1DR,EAAe,CAACC,EAASG,OAuBrB,yBACA,4BAAQD,QApBd,WAIE,IADA,IAAIM,EAAeR,EACVS,EAAID,EAAaD,OAAS,EAAGE,EAAI,EAAGA,IAAK,CAChD,IAAMC,EAAIN,KAAKO,MAAMP,KAAKE,SAAWG,GAC/BhB,EAAOe,EAAaC,GAC1BD,EAAaC,GAAKD,EAAaE,GAC/BF,EAAaE,GAAKjB,EAEpB,IAAImB,EAAeJ,EAAajB,KAAI,SAACsB,EAASC,GAC5C,OAAO,wBAAIpB,IAAKoB,GAAQD,MAE1Bd,EAAea,KAOX,mBAEF,yBAAKX,UAAU,WACb,4BACGH,EAAYP,KAAI,SAAAwB,GACf,OAAOA,SC+BJC,MA7Df,WACE,IAAIC,EAAc,CAChB,QACA,QACA,SACA,QACA,OACA,UACA,UACA,WACA,QACA,SACA,QACA,SACA,SACA,MACA,QACA,UACA,SACA,OACA,WACA,WACA,UACA,QACA,OACA,SACA,SAGEC,EAAY,CACd,UACA,UACA,SACA,QACA,QACA,OACA,OACA,MACA,UACA,OACA,WACA,UACA,OAGE5B,EAAU,CAAC,WAAY,UAE3B,OACE,yBAAKW,UAAU,OACb,kBAAC,IAAD,CAAekB,SAAS,sBACtB,kBAAC,IAAD,CAAMxB,GAAG,IAAIM,UAAU,cAAa,mDACpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,YAAYC,OAAQ,kBAAI,kBAAC,EAAD,CAAWrB,SAAUiB,OACzD,kBAAC,IAAD,CAAOG,KAAK,UAAUC,OAAQ,kBAAI,kBAAC,EAAD,CAAWrB,SAAUkB,OACvD,kBAAC,IAAD,CAAOE,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,CAAM/B,QAASA,WCjDnCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a1d0f88e.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom';\n\nfunction Main(props) {\n  return (\n    <>\n      <h2>Pick a cohort:</h2>\n      <ul>\n        {props.cohorts.map(cohort => {\n          let temp = `/${cohort}`\n          return <li key={cohort}><Link to={temp}>{cohort}</Link></li>\n        })}\n      </ul>\n    </>\n  )\n}\n\nexport default Main;","import React, {useState} from 'react'\n\nfunction SEIR713(props) {\n  let [displayText, setDisplayText] = useState([''])\n  let [students, setstudents] = useState(props.students)\n\n  function pickStu() {\n    let randNum = Math.round(Math.random() * (students.length-1))\n    setDisplayText([students[randNum]])\n    return\n  }\n\n  function shuff() {\n    // shuffle array with Fisher-Yates\n    // medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\n    let tempStudents = students\n    for (let i = tempStudents.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i)\n      const temp = tempStudents[i]\n      tempStudents[i] = tempStudents[j]\n      tempStudents[j] = temp\n    }\n    let studentArray = tempStudents.map((student, index) => {\n      return <li key={index}>{student}</li>\n    })\n    setDisplayText(studentArray)\n  }\n\n  return (\n    <>\n      <div className=\"buttonContainer\">\n        <button onClick={pickStu}>Get a random student!</button>\n        <button onClick={shuff}>Shuffle class!</button>\n      </div>\n      <div className=\"randStu\">\n        <ol>\n          {displayText.map(item => {\n            return item\n          })}\n        </ol>\n      </div>\n    </>\n  )\n}\n\nexport default SEIR713;","import React from 'react';\nimport {BrowserRouter, Switch, Route, Link} from 'react-router-dom';\nimport './style.css';\nimport Main from './Main';\nimport SEICOHORT from './SEICohort';\n\n\nfunction App() {\n  let SEIR713List = [\n    \"Levin\",\n    \"Shane\",\n    \"Martin\",\n    \"David\",\n    \"Josh\",\n    \"Branden\",\n    \"Anthony\",\n    \"Margaret\",\n    \"Alice\",\n    \"Elaine\",\n    \"Sameh\",\n    \"Barent\",\n    \"Tanner\",\n    \"Han\",\n    \"Alpha\",\n    \"Channee\",\n    \"Steven\",\n    \"Yoel\",\n    \"Cristina\",\n    \"Nicholas\",\n    \"Subrata\",\n    \"Rohun\",\n    \"Lizz\",\n    \"Philip\",\n    \"Irene\"\n  ]\n\n  let SEI29List = [\n    \"Chris B\",\n    \"Chris S\",\n    \"Connie\",\n    \"Danny\",\n    \"Dylan\",\n    \"Erik\",\n    \"John\",\n    \"Mac\",\n    \"Melissa\",\n    \"Pete\",\n    \"Shawhien\",\n    \"Solomon\",\n    \"Tin\",\n  ]\n\n  let cohorts = ['SEIR-713', 'SEI-29']\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename=\"student-randomizer\">\n        <Link to=\"/\" className=\"headerLink\"><h1>Student Randomizer</h1></Link>\n        <Switch>\n          <Route path=\"/SEIR-713\" render={()=><SEICOHORT students={SEIR713List} />} />\n          <Route path=\"/SEI-29\" render={()=><SEICOHORT students={SEI29List} />} />\n          <Route path=\"/\" render={() => <Main cohorts={cohorts} />} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}